'number' + 23 + 32 // Ответ: 'number2332';
//так как к строке (String) мы плюсуем числа, будет идти добавление как строка. Тоесть конкатенация.


41 + 1 + 'number' // Ответ: '42number';
// С начало идет добавление чисел(Number), а после идет обьединение строки (конкатенация);


null + 1 // Ответ: 1
// Операция сложения выполняется таким образом, что если один из операндов равен null, то он интерпретируется как число 0. Поэтому null + 1 будет равно 0 + 1, что равно 1;


'five' + + 'two' // Ответ: 'fiveNaN';
//Когда мы пишем 'five' + + 'two', интерпретатор видит два плюса рядом. Первый плюс объединяет строку 'five', 
//а второй плюс перед 'two' воспринимается как унарный плюс, который пытается преобразовать строку 'two' в числовое значение. 
//Поскольку строка 'two' не может быть корректно преобразована в число, результатом будет NaN.
//Таким образом, мы получаем строку 'fiveNaN';


2 && 7 // Ответ : 7;
// В выражении 2 && 7 используется логический оператор &&, который возвращает значение последнего истинного операнда. 
// В данном случае, оба операнда (2 и 7) являются истинными значениями в логическом контексте. 
// Поскольку оба операнда истинные, результатом выражения будет значение последнего операнда, то есть 7.


+'40' + +'2'; // Ответ: 42;
// Унарный '+' переобразовует строку в числовое значение. А так как у нас в строке стоят числа, происходит сложение 40 + 2;


'10' - 5 === 6; // Ответ: False;
// В данном выражении происходит неявное преобразование строки '10' в число.
// Потом идет арифметическая операция 10 - 5 что = 5
// Затем происходит строгое сравнение 5 === 6, где 5 не = 6;
// По этому мы получаем ответ - False, то есть "не правда";


true + false // Ответ: 1;
// Результат сложения между логическими значениями привел к тому, что 
// они переобразовались как числа. Где "true" это 1, а "False" это 0.
// Таким образом мы получаем 1 + 0 что равно 1;


'4px' - 3 // Ответ: NaN;
// В случае '4px' - 3, строка '4px' не может быть преобразована в число, поэтому операция вычитания возвращает NaN.


'4' - 3 // Ответ: 1;
//В данном выражении происходит неявное преобразование строки '4' в число.
// По этому арифм. действие 4 -3 будет 1.


'2' + 3 ** 2; // Ответ: '29'
// Сначала будет выполнена операция возведения в степень 3 ** 2, что равно 9.
// Затем операция сложения '2' + 9 произведет конкатенацию строки '2' и числа 9, так как один из операндов является строкой, что приведет к строке '29'.


12 / '6' // Ответ: 2
// В нашем случае, строка '6' может быть корректно преобразована в число 6. Таким образом, операция деления будет эквивалентна 12 / 6, что равно 2.


23 + 42 + 'number' // Ответ: '65number'
// Сначала будет выполнено сложение 23 + 42, что даст результат 65.
// Затем будет произведена конкатенация строки 'number' с числом 65, поскольку один из операндов является строкой. В результате получится строка '65number'.


'10' + (5 === 6); // Ответ: '10false'
//Сначала выражение (5 === 6) будет вычислено, так как оно в скобках и в приоритете. Поскольку условие 5 === 6 ложно, результат этого выражения будет false.
// Затем будет произведена конкатенация строки '10' с логическим значением false. При конкатенации логическое значение false будет преобразовано в строку 'false'.

'number' + 15 + 3 // Ответ: 'number153'
// Так как в JavaScript операции выполняются слева направо ( по скольку у нас нет ничего в дужках(),а точнее приоритера):
// Сначала будет выполнена конкатенация строки 'number' с числом 15, что даст строку 'number15'.
// Затем будет произведена конкатенация полученной строки 'number15' с числом 3, что приведет к строке 'number153'.
